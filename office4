private async Task GetOfficeVersionAsync(ManagementScope scope, ScanStatus scanStatus, CancellationToken cancellationToken)
{
    try
    {
        string officeVersion = await Task.Run(() =>
        {
            // Attempt 1: Check installed Office products via the registry (WMI fallback if needed)
            string detectedOfficeVersion = GetOfficeVersionFromRegistry();
            if (string.IsNullOrEmpty(detectedOfficeVersion))
            {
                detectedOfficeVersion = GetOfficeVersionFromWMI(scope);
            }

            return detectedOfficeVersion ?? "Microsoft Office not found";
        }, cancellationToken);

        scanStatus.MicrosoftOfficeVersion = officeVersion;
    }
    catch (Exception ex)
    {
        Logger.Log(LogLevel.ERROR, $"Error getting Microsoft Office version: {ex.Message}", context: "GetOfficeVersionAsync");
    }
}

private string GetOfficeVersionFromRegistry()
{
    try
    {
        // Possible registry keys where Office might be installed
        string[] registryKeys = new string[]
        {
            @"SOFTWARE\Microsoft\Office\16.0\Common\InstallRoot",  // Office 2016/2019/365
            @"SOFTWARE\Microsoft\Office\15.0\Common\InstallRoot",  // Office 2013
            @"SOFTWARE\Microsoft\Office\14.0\Common\InstallRoot",  // Office 2010
            @"SOFTWARE\Microsoft\Office\12.0\Common\InstallRoot",  // Office 2007
            @"SOFTWARE\Microsoft\Office\Word\InstallRoot",          // Word stand-alone
            @"SOFTWARE\Microsoft\Office\Excel\InstallRoot",         // Excel stand-alone
            @"SOFTWARE\Microsoft\Office\PowerPoint\InstallRoot"     // PowerPoint stand-alone
        };

        foreach (string key in registryKeys)
        {
            using (RegistryKey regKey = Registry.LocalMachine.OpenSubKey(key))
            {
                if (regKey != null)
                {
                    string installPath = regKey.GetValue("Path") as string;
                    if (!string.IsNullOrEmpty(installPath))
                    {
                        if (key.Contains("16.0")) return "Microsoft Office 2016/2019/365";
                        if (key.Contains("15.0")) return "Microsoft Office 2013";
                        if (key.Contains("14.0")) return "Microsoft Office 2010";
                        if (key.Contains("12.0")) return "Microsoft Office 2007";
                        if (key.Contains("Word")) return "Microsoft Word found";
                        if (key.Contains("Excel")) return "Microsoft Excel found";
                        if (key.Contains("PowerPoint")) return "Microsoft PowerPoint found";
                    }
                }
            }
        }
    }
    catch (Exception ex)
    {
        Logger.Log(LogLevel.ERROR, $"Error accessing registry for Office version: {ex.Message}", context: "GetOfficeVersionFromRegistry");
    }

    return null;
}

private string GetOfficeVersionFromWMI(ManagementScope scope)
{
    try
    {
        var officeQuery = new ObjectQuery("SELECT Name, Version FROM Win32_Product WHERE Name LIKE 'Microsoft Office%' OR Name LIKE 'Microsoft Word%' OR Name LIKE 'Microsoft Excel%' OR Name LIKE 'Microsoft PowerPoint%'");
        using (var searcher = new ManagementObjectSearcher(scope, officeQuery))
        {
            var officeProducts = searcher.Get().Cast<ManagementObject>().ToList();
            if (officeProducts.Any())
            {
                var officeList = officeProducts.Select(product => $"{product["Name"]} ({product["Version"]})").ToList();
                return string.Join(", ", officeList);
            }
        }
    }
    catch (Exception ex)
    {
        Logger.Log(LogLevel.ERROR, $"Error querying WMI for Office version: {ex.Message}", context: "GetOfficeVersionFromWMI");
    }

    return null;
}