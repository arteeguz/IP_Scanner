private async Task GetOfficeVersionAsync(ManagementScope scope, ScanStatus scanStatus, CancellationToken cancellationToken)
{
    try
    {
        string officeVersion = "Not Installed";
        
        // Check for Office installations using Win32_Product
        var productQuery = new ObjectQuery("SELECT Name, Version FROM Win32_Product WHERE Name LIKE 'Microsoft Office%' OR Name LIKE 'Microsoft 365%'");
        using (var searcher = new ManagementObjectSearcher(scope, productQuery))
        {
            var results = await Task.Run(() => searcher.Get(), cancellationToken);
            foreach (ManagementObject result in results)
            {
                string name = result["Name"] as string;
                string version = result["Version"] as string;
                if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(version))
                {
                    officeVersion = $"{name} ({version})";
                    break;
                }
            }
        }

        // If not found, check specific registry keys
        if (officeVersion == "Not Installed")
        {
            string[] officeKeys = {
                @"SOFTWARE\Microsoft\Office\16.0\Common\InstallRoot",
                @"SOFTWARE\Microsoft\Office\15.0\Common\InstallRoot",
                @"SOFTWARE\Microsoft\Office\14.0\Common\InstallRoot"
            };

            foreach (var key in officeKeys)
            {
                var query = new ObjectQuery($"SELECT * FROM Win32_Registry WHERE CurrentKey = '{key}'");
                using (var searcher = new ManagementObjectSearcher(scope, query))
                {
                    var results = await Task.Run(() => searcher.Get(), cancellationToken);
                    if (results.Count > 0)
                    {
                        string versionNumber = key.Split('\\')[3];
                        officeVersion = GetOfficeVersionFromNumber(versionNumber);
                        break;
                    }
                }
            }
        }

        // Check for Click-to-Run installation
        if (officeVersion.StartsWith("Microsoft Office 16"))
        {
            string clickToRunPath = @"SOFTWARE\Microsoft\Office\ClickToRun\Configuration";
            var clickToRunQuery = new ObjectQuery($"SELECT * FROM Win32_Registry WHERE CurrentKey = '{clickToRunPath}'");
            using (var searcher = new ManagementObjectSearcher(scope, clickToRunQuery))
            {
                var results = await Task.Run(() => searcher.Get(), cancellationToken);
                foreach (ManagementObject result in results)
                {
                    if (result["CurrentKey"].ToString().Contains("ProductReleaseIds"))
                    {
                        string value = result["Data"] as string;
                        if (!string.IsNullOrEmpty(value))
                        {
                            if (value.Contains("O365"))
                                officeVersion = "Microsoft 365";
                            else if (value.Contains("2021"))
                                officeVersion = "Microsoft Office 2021";
                            else if (value.Contains("2019"))
                                officeVersion = "Microsoft Office 2019";
                            break;
                        }
                    }
                }
            }
        }

        scanStatus.MicrosoftOfficeVersion = officeVersion;
    }
    catch (Exception ex)
    {
        Logger.Log(LogLevel.ERROR, $"Error getting Microsoft Office version: {ex.Message}", context: "GetOfficeVersionAsync");
        scanStatus.MicrosoftOfficeVersion = "Error";
    }
}

private string GetOfficeVersionFromNumber(string versionNumber)
{
    switch (versionNumber)
    {
        case "16.0":
            return "Microsoft Office 16 (2016/2019/2021/365)";
        case "15.0":
            return "Microsoft Office 2013";
        case "14.0":
            return "Microsoft Office 2010";
        default:
            return $"Microsoft Office (Unknown Version: {versionNumber})";
    }
}
