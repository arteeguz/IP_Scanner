private async Task GetOfficeVersionAsync(ManagementScope scope, ScanStatus scanStatus, CancellationToken cancellationToken)
{
    try
    {
        string officeVersion = await Task.Run(() =>
        {
            // Define the registry paths to search for Office versions
            string[] officeRegistryPaths =
            {
                @"SOFTWARE\Microsoft\Office\16.0\Registration", // Office 2016/2019/365
                @"SOFTWARE\Microsoft\Office\15.0\Registration", // Office 2013
                @"SOFTWARE\Microsoft\Office\14.0\Registration", // Office 2010
                @"SOFTWARE\Microsoft\Office\12.0\Registration", // Office 2007
            };

            foreach (var path in officeRegistryPaths)
            {
                try
                {
                    using (var regKey = Registry.LocalMachine.OpenSubKey(path))
                    {
                        if (regKey != null)
                        {
                            var productName = regKey.GetValue("ProductName")?.ToString();
                            var productVersion = regKey.GetValue("Version")?.ToString();

                            if (!string.IsNullOrEmpty(productName) && !string.IsNullOrEmpty(productVersion))
                            {
                                return $"{productName} ({productVersion})";
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Logger.Log(LogLevel.ERROR, $"Error accessing registry path: {path}. Exception: {ex.Message}", context: "GetOfficeVersionAsync");
                }
            }

            return "Microsoft Office not found";
        }, cancellationToken);

        scanStatus.MicrosoftOfficeVersion = officeVersion;
    }
    catch (Exception ex)
    {
        Logger.Log(LogLevel.ERROR, $"Error getting Microsoft Office version: {ex.Message}", context: "GetOfficeVersionAsync");
    }
}